import QtQuick.tooling 1.2

// This file describes the plugin-supplied types contained in the library.
// It is used for QML tooling purposes only.
//
// This file was auto-generated by:
// 'qmlplugindump -notrelocatable Unity 0.2 /build/unity-scopes-shell-LpFQ5t/unity-scopes-shell-0.5.8+17.04.20170310/obj-x86_64-linux-gnu/src/Unity/../'

Module {
    dependencies: ["QtQuick 2.7"]
    Component {
        name: "scopes_ng::PreviewWidgetModel"
        prototype: "unity::shell::scopes::PreviewWidgetModelInterface"
        exports: ["Unity/PreviewWidgetModel 0.2"]
        isCreatable: false
        exportMetaObjectRevisions: [0]
    }
    Component {
        name: "scopes_ng::ResultsModel"
        prototype: "unity::shell::scopes::ResultsModelInterface"
        exports: ["Unity/ResultsModel 0.2"]
        isCreatable: false
        exportMetaObjectRevisions: [0]
    }
    Component {
        name: "scopes_ng::Scopes"
        prototype: "unity::shell::scopes::ScopesInterface"
        exports: ["Unity/Scopes 0.2"]
        exportMetaObjectRevisions: [0]
        Signal { name: "metadataRefreshed" }
        Method {
            name: "rowCount"
            type: "int"
            Parameter { name: "parent"; type: "QModelIndex" }
        }
        Method { name: "rowCount"; type: "int" }
        Method {
            name: "getScope"
            type: "unity::shell::scopes::ScopeInterface*"
            Parameter { name: "row"; type: "int" }
        }
        Method {
            name: "getScope"
            type: "unity::shell::scopes::ScopeInterface*"
            Parameter { name: "scopeId"; type: "string" }
        }
        Method {
            name: "setFavorite"
            Parameter { name: "scopeId"; type: "string" }
            Parameter { name: "value"; type: "bool" }
        }
        Method {
            name: "moveFavoriteTo"
            Parameter { name: "scopeId"; type: "string" }
            Parameter { name: "index"; type: "int" }
        }
        Method {
            name: "closeScope"
            Parameter { name: "scope"; type: "unity::shell::scopes::ScopeInterface"; isPointer: true }
        }
    }
    Component {
        name: "unity::shell::scopes::CategoriesInterface"
        prototype: "QAbstractListModel"
        exports: ["Unity/Categories 0.2"]
        isCreatable: false
        exportMetaObjectRevisions: [0]
        Enum {
            name: "Roles"
            values: {
                "RoleCategoryId": 0,
                "RoleName": 1,
                "RoleIcon": 2,
                "RoleRawRendererTemplate": 3,
                "RoleRenderer": 4,
                "RoleComponents": 5,
                "RoleHeaderLink": 6,
                "RoleResults": 7,
                "RoleCount": 8
            }
        }
        Method {
            name: "overrideCategoryJson"
            type: "bool"
            Parameter { name: "categoryId"; type: "string" }
            Parameter { name: "json"; type: "string" }
        }
    }
    Component {
        name: "unity::shell::scopes::FilterBaseInterface"
        prototype: "QObject"
        exports: ["Unity/Filter 0.2"]
        isCreatable: false
        exportMetaObjectRevisions: [0]
        Property { name: "filterId"; type: "string"; isReadonly: true }
        Property { name: "title"; type: "string"; isReadonly: true }
        Property {
            name: "filterType"
            type: "unity::shell::scopes::FiltersInterface::FilterType"
            isReadonly: true
        }
    }
    Component {
        name: "unity::shell::scopes::FiltersInterface"
        prototype: "QAbstractListModel"
        exports: ["Unity/Filters 0.2"]
        isCreatable: false
        exportMetaObjectRevisions: [0]
        Enum {
            name: "Roles"
            values: {
                "RoleFilterId": 257,
                "RoleFilterType": 258,
                "RoleFilter": 259
            }
        }
        Enum {
            name: "FilterType"
            values: {
                "Invalid": 0,
                "OptionSelectorFilter": 1,
                "RangeInputFilter": 2,
                "ValueSliderFilter": 3,
                "ExpandableFilterWidget": 4
            }
        }
    }
    Component {
        name: "unity::shell::scopes::NavigationInterface"
        prototype: "QAbstractListModel"
        exports: ["Unity/Navigation 0.2"]
        isCreatable: false
        exportMetaObjectRevisions: [0]
        Enum {
            name: "Roles"
            values: {
                "RoleNavigationId": 0,
                "RoleLabel": 1,
                "RoleAllLabel": 2,
                "RoleHasChildren": 3,
                "RoleIsActive": 4
            }
        }
        Property { name: "navigationId"; type: "string"; isReadonly: true }
        Property { name: "label"; type: "string"; isReadonly: true }
        Property { name: "allLabel"; type: "string"; isReadonly: true }
        Property { name: "parentNavigationId"; type: "string"; isReadonly: true }
        Property { name: "parentLabel"; type: "string"; isReadonly: true }
        Property { name: "loaded"; type: "bool"; isReadonly: true }
        Property { name: "isRoot"; type: "bool"; isReadonly: true }
        Property { name: "hidden"; type: "bool"; isReadonly: true }
        Property { name: "count"; type: "int"; isReadonly: true }
    }
    Component {
        name: "unity::shell::scopes::OptionSelectorOptionsInterface"
        prototype: "QAbstractListModel"
        exports: ["Unity/OptionSelectorOptions 0.2"]
        isCreatable: false
        exportMetaObjectRevisions: [0]
        Enum {
            name: "Roles"
            values: {
                "RoleOptionId": 257,
                "RoleOptionLabel": 258,
                "RoleOptionChecked": 259
            }
        }
        Method {
            name: "setChecked"
            Parameter { name: "index"; type: "int" }
            Parameter { name: "checked"; type: "bool" }
        }
    }
    Component {
        name: "unity::shell::scopes::PreviewModelInterface"
        prototype: "QAbstractListModel"
        exports: ["Unity/PreviewModel 0.2"]
        isCreatable: false
        exportMetaObjectRevisions: [0]
        Enum {
            name: "Roles"
            values: {
                "RoleColumnModel": 0
            }
        }
        Property { name: "widgetColumnCount"; type: "int" }
        Property { name: "loaded"; type: "bool"; isReadonly: true }
        Property { name: "processingAction"; type: "bool"; isReadonly: true }
        Signal {
            name: "triggered"
            Parameter { type: "string" }
            Parameter { type: "string" }
            Parameter { type: "QVariantMap" }
        }
    }
    Component {
        name: "unity::shell::scopes::PreviewWidgetModelInterface"
        prototype: "QAbstractListModel"
        Enum {
            name: "Roles"
            values: {
                "RoleWidgetId": 0,
                "RoleType": 1,
                "RoleProperties": 2
            }
        }
    }
    Component {
        name: "unity::shell::scopes::RangeInputFilterInterface"
        prototype: "unity::shell::scopes::FilterBaseInterface"
        exports: ["Unity/RangeInputFilter 0.2"]
        isCreatable: false
        exportMetaObjectRevisions: [0]
        Property { name: "startValue"; type: "double" }
        Property { name: "endValue"; type: "double" }
        Property { name: "startPrefixLabel"; type: "string"; isReadonly: true }
        Property { name: "startPostfixLabel"; type: "string"; isReadonly: true }
        Property { name: "centralLabel"; type: "string"; isReadonly: true }
        Property { name: "endPrefixLabel"; type: "string"; isReadonly: true }
        Property { name: "endPostfixLabel"; type: "string"; isReadonly: true }
        Property { name: "hasStartValue"; type: "bool"; isReadonly: true }
        Property { name: "hasEndValue"; type: "bool"; isReadonly: true }
        Method { name: "eraseStartValue" }
        Method { name: "eraseEndValue" }
    }
    Component {
        name: "unity::shell::scopes::ResultsModelInterface"
        prototype: "QAbstractListModel"
        Enum {
            name: "Roles"
            values: {
                "RoleUri": 0,
                "RoleCategoryId": 1,
                "RoleDndUri": 2,
                "RoleResult": 3,
                "RoleTitle": 4,
                "RoleArt": 5,
                "RoleSubtitle": 6,
                "RoleMascot": 7,
                "RoleEmblem": 8,
                "RoleSummary": 9,
                "RoleAttributes": 10,
                "RoleBackground": 11,
                "RoleOverlayColor": 12,
                "RoleQuickPreviewData": 13,
                "RoleSocialActions": 14
            }
        }
        Property { name: "categoryId"; type: "string" }
        Property { name: "count"; type: "int"; isReadonly: true }
    }
    Component {
        name: "unity::shell::scopes::ScopeInterface"
        prototype: "QObject"
        exports: ["Unity/Scope 0.2"]
        isCreatable: false
        exportMetaObjectRevisions: [0]
        Enum {
            name: "Status"
            values: {
                "Okay": 0,
                "NoInternet": 1,
                "NoLocationData": 2,
                "Unknown": 3
            }
        }
        Property { name: "id"; type: "string"; isReadonly: true }
        Property { name: "name"; type: "string"; isReadonly: true }
        Property { name: "iconHint"; type: "string"; isReadonly: true }
        Property { name: "description"; type: "string"; isReadonly: true }
        Property { name: "searchHint"; type: "string"; isReadonly: true }
        Property { name: "searchInProgress"; type: "bool"; isReadonly: true }
        Property { name: "activationInProgress"; type: "bool"; isReadonly: true }
        Property { name: "favorite"; type: "bool" }
        Property { name: "shortcut"; type: "string"; isReadonly: true }
        Property {
            name: "categories"
            type: "unity::shell::scopes::CategoriesInterface"
            isReadonly: true
            isPointer: true
        }
        Property {
            name: "settings"
            type: "unity::shell::scopes::SettingsModelInterface"
            isReadonly: true
            isPointer: true
        }
        Property {
            name: "primaryNavigationFilter"
            type: "unity::shell::scopes::FilterBaseInterface"
            isReadonly: true
            isPointer: true
        }
        Property { name: "searchQuery"; type: "string" }
        Property { name: "noResultsHint"; type: "string" }
        Property { name: "formFactor"; type: "string" }
        Property { name: "isActive"; type: "bool" }
        Property { name: "currentNavigationId"; type: "string"; isReadonly: true }
        Property { name: "hasNavigation"; type: "bool"; isReadonly: true }
        Property { name: "customizations"; type: "QVariantMap"; isReadonly: true }
        Property {
            name: "status"
            type: "unity::shell::scopes::ScopeInterface::Status"
            isReadonly: true
        }
        Property {
            name: "filters"
            type: "unity::shell::scopes::FiltersInterface"
            isReadonly: true
            isPointer: true
        }
        Property { name: "primaryNavigationTag"; type: "string"; isReadonly: true }
        Property { name: "activeFiltersCount"; type: "int"; isReadonly: true }
        Signal { name: "detailsChanged" }
        Signal { name: "showDash" }
        Signal { name: "hideDash" }
        Signal {
            name: "gotoUri"
            Parameter { name: "uri"; type: "string" }
        }
        Signal {
            name: "previewRequested"
            Parameter { name: "result"; type: "QVariant" }
        }
        Signal {
            name: "gotoScope"
            Parameter { name: "scopeId"; type: "string" }
        }
        Signal {
            name: "openScope"
            Parameter { name: "scope"; type: "unity::shell::scopes::ScopeInterface"; isPointer: true }
        }
        Method {
            name: "activate"
            Parameter { name: "result"; type: "QVariant" }
            Parameter { name: "categoryId"; type: "string" }
        }
        Method {
            name: "preview"
            type: "unity::shell::scopes::PreviewModelInterface*"
            Parameter { name: "result"; type: "QVariant" }
            Parameter { name: "categoryId"; type: "string" }
        }
        Method { name: "cancelActivation" }
        Method {
            name: "closeScope"
            Parameter { name: "scope"; type: "unity::shell::scopes::ScopeInterface"; isPointer: true }
        }
        Method {
            name: "getNavigation"
            type: "unity::shell::scopes::NavigationInterface*"
            Parameter { name: "navigationId"; type: "string" }
        }
        Method {
            name: "setNavigationState"
            Parameter { name: "navId"; type: "string" }
        }
        Method {
            name: "performQuery"
            Parameter { name: "cannedQuery"; type: "string" }
        }
        Method { name: "refresh" }
        Method { name: "resetPrimaryNavigationTag" }
        Method { name: "resetFilters" }
        Method {
            name: "activateAction"
            Parameter { name: "result"; type: "QVariant" }
            Parameter { name: "categoryId"; type: "string" }
            Parameter { name: "actionId"; type: "string" }
        }
    }
    Component {
        name: "unity::shell::scopes::ScopesInterface"
        prototype: "QAbstractListModel"
        Enum {
            name: "Roles"
            values: {
                "RoleScope": 0,
                "RoleId": 1,
                "RoleTitle": 2
            }
        }
        Property { name: "loaded"; type: "bool"; isReadonly: true }
        Property { name: "count"; type: "int"; isReadonly: true }
        Property {
            name: "overviewScope"
            type: "unity::shell::scopes::ScopeInterface"
            isReadonly: true
            isPointer: true
        }
        Method {
            name: "getScope"
            type: "unity::shell::scopes::ScopeInterface*"
            Parameter { name: "row"; type: "int" }
        }
        Method {
            name: "getScope"
            type: "unity::shell::scopes::ScopeInterface*"
            Parameter { name: "scopeId"; type: "string" }
        }
        Method {
            name: "setFavorite"
            Parameter { name: "scopeId"; type: "string" }
            Parameter { name: "favorite"; type: "bool" }
        }
        Method {
            name: "moveFavoriteTo"
            Parameter { name: "scopeId"; type: "string" }
            Parameter { name: "index"; type: "int" }
        }
        Method {
            name: "closeScope"
            Parameter { name: "scope"; type: "unity::shell::scopes::ScopeInterface"; isPointer: true }
        }
    }
    Component {
        name: "unity::shell::scopes::SettingsModelInterface"
        prototype: "QAbstractListModel"
        exports: ["Unity/Settings 0.2"]
        isCreatable: false
        exportMetaObjectRevisions: [0]
        Enum {
            name: "Roles"
            values: {
                "RoleSettingId": 0,
                "RoleDisplayName": 1,
                "RoleType": 2,
                "RoleProperties": 3,
                "RoleValue": 4
            }
        }
        Property { name: "count"; type: "int"; isReadonly: true }
    }
    Component {
        name: "unity::shell::scopes::ValueSliderFilterInterface"
        prototype: "unity::shell::scopes::FilterBaseInterface"
        exports: ["Unity/ValueSliderFilter 0.2"]
        isCreatable: false
        exportMetaObjectRevisions: [0]
        Property { name: "value"; type: "double" }
        Property {
            name: "values"
            type: "unity::shell::scopes::ValueSliderValuesInterface"
            isReadonly: true
            isPointer: true
        }
        Property { name: "minValue"; type: "double"; isReadonly: true }
        Property { name: "maxValue"; type: "double"; isReadonly: true }
    }
    Component {
        name: "unity::shell::scopes::ValueSliderValuesInterface"
        prototype: "QAbstractListModel"
        exports: ["Unity/ValueSliderValues 0.2"]
        isCreatable: false
        exportMetaObjectRevisions: [0]
        Enum {
            name: "Roles"
            values: {
                "RoleValue": 257,
                "RoleLabel": 258
            }
        }
    }
}
