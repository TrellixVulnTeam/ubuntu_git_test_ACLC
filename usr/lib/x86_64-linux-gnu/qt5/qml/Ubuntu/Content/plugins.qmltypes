import QtQuick.tooling 1.2

// This file describes the plugin-supplied types contained in the library.
// It is used for QML tooling purposes only.
//
// This file was auto-generated by:
// 'qmlplugindump -noinstantiate -notrelocatable Ubuntu.Content 1.1 ../../'

Module {
    dependencies: [
        "QtFeedback 5.0",
        "QtGraphicalEffects 1.0",
        "QtQuick 2.4",
        "QtQuick.Layouts 1.1",
        "QtQuick.Window 2.2",
        "Ubuntu.Components 1.3",
        "Ubuntu.Components.ListItems 1.3",
        "Ubuntu.Components.Popups 1.3",
        "Ubuntu.Components.Styles 1.3",
        "Ubuntu.Components.Themes 1.3",
        "Ubuntu.Components.Themes.Ambiance 1.3",
        "Ubuntu.PerformanceMetrics 1.0"
    ]
    Component {
        name: "ContentHandler"
        prototype: "QObject"
        exports: [
            "Ubuntu.Content/ContentHandler 0.1",
            "Ubuntu.Content/ContentHandler 1.0",
            "Ubuntu.Content/ContentHandler 1.1",
            "Ubuntu.Content/ContentHandler 1.3"
        ]
        isCreatable: false
        exportMetaObjectRevisions: [0, 0, 0, 0]
        Enum {
            name: "Handler"
            values: {
                "Source": 0,
                "Destination": 1,
                "Share": 2
            }
        }
    }
    Component {
        name: "ContentHub"
        prototype: "QObject"
        exports: [
            "Ubuntu.Content/ContentHub 0.1",
            "Ubuntu.Content/ContentHub 1.0",
            "Ubuntu.Content/ContentHub 1.1",
            "Ubuntu.Content/ContentHub 1.3"
        ]
        isCreatable: false
        isSingleton: true
        exportMetaObjectRevisions: [0, 0, 0, 0]
        Property { name: "finishedImports"; type: "ContentTransfer"; isList: true; isReadonly: true }
        Property { name: "hasPending"; type: "bool"; isReadonly: true }
        Signal {
            name: "importRequested"
            Parameter { name: "transfer"; type: "ContentTransfer"; isPointer: true }
        }
        Signal {
            name: "exportRequested"
            Parameter { name: "transfer"; type: "ContentTransfer"; isPointer: true }
        }
        Signal {
            name: "shareRequested"
            Parameter { name: "transfer"; type: "ContentTransfer"; isPointer: true }
        }
        Signal {
            name: "peerSelected"
            Parameter { name: "peer"; type: "ContentPeer"; isPointer: true }
        }
        Signal { name: "peerSelectionCancelled" }
        Signal {
            name: "pasteSelected"
            Parameter { name: "paste"; type: "QByteArray" }
            Parameter { name: "pasteAsRichText"; type: "bool" }
        }
        Signal { name: "pasteSelectionCancelled" }
        Method { name: "restoreImports" }
        Method {
            name: "importContent"
            type: "ContentTransfer*"
            Parameter { name: "peer"; type: "com::ubuntu::content::Peer" }
            Parameter { name: "type"; type: "ContentType::Type" }
        }
        Method {
            name: "exportContent"
            type: "ContentTransfer*"
            Parameter { name: "peer"; type: "com::ubuntu::content::Peer" }
            Parameter { name: "type"; type: "ContentType::Type" }
        }
        Method {
            name: "shareContent"
            type: "ContentTransfer*"
            Parameter { name: "peer"; type: "com::ubuntu::content::Peer" }
            Parameter { name: "type"; type: "ContentType::Type" }
        }
        Method {
            name: "requestPeerForType"
            Parameter { type: "int" }
            Parameter { type: "int" }
        }
        Method {
            name: "selectPeerForAppId"
            Parameter { type: "string" }
            Parameter { type: "string" }
        }
        Method {
            name: "selectPeerForAppIdCancelled"
            Parameter { type: "string" }
        }
        Method { name: "requestPaste" }
        Method {
            name: "selectPasteForAppId"
            Parameter { type: "string" }
            Parameter { type: "string" }
            Parameter { type: "string" }
            Parameter { type: "bool" }
        }
        Method {
            name: "selectPasteForAppIdCancelled"
            Parameter { type: "string" }
        }
    }
    Component {
        name: "ContentItem"
        prototype: "QObject"
        exports: [
            "Ubuntu.Content/ContentItem 0.1",
            "Ubuntu.Content/ContentItem 1.0",
            "Ubuntu.Content/ContentItem 1.1",
            "Ubuntu.Content/ContentItem 1.3"
        ]
        exportMetaObjectRevisions: [0, 0, 0, 0]
        Property { name: "name"; type: "string" }
        Property { name: "url"; type: "QUrl" }
        Property { name: "text"; type: "string" }
        Method { name: "toDataURI"; type: "QUrl" }
        Method {
            name: "move"
            type: "bool"
            Parameter { name: "dir"; type: "string" }
        }
        Method {
            name: "move"
            type: "bool"
            Parameter { name: "dir"; type: "string" }
            Parameter { name: "fileName"; type: "string" }
        }
    }
    Component {
        name: "ContentPeer"
        prototype: "QObject"
        exports: [
            "Ubuntu.Content/ContentPeer 0.1",
            "Ubuntu.Content/ContentPeer 1.0",
            "Ubuntu.Content/ContentPeer 1.1",
            "Ubuntu.Content/ContentPeer 1.3"
        ]
        exportMetaObjectRevisions: [0, 0, 0, 0]
        Property { name: "name"; type: "string"; isReadonly: true }
        Property { name: "appId"; type: "string" }
        Property { name: "handler"; type: "ContentHandler::Handler" }
        Property { name: "contentType"; type: "ContentType::Type" }
        Property { name: "selectionType"; type: "ContentTransfer::SelectionType" }
        Property { name: "icon"; type: "QImage"; isReadonly: true }
        Property { name: "isDefaultPeer"; type: "bool"; isReadonly: true }
        Method { name: "request"; type: "ContentTransfer*" }
        Method {
            name: "request"
            type: "ContentTransfer*"
            Parameter { name: "store"; type: "ContentStore"; isPointer: true }
        }
    }
    Component {
        name: "ContentPeerModel"
        prototype: "QObject"
        exports: [
            "Ubuntu.Content/ContentPeerModel 0.1",
            "Ubuntu.Content/ContentPeerModel 1.0",
            "Ubuntu.Content/ContentPeerModel 1.1",
            "Ubuntu.Content/ContentPeerModel 1.3"
        ]
        exportMetaObjectRevisions: [0, 0, 0, 0]
        Property { name: "contentType"; type: "ContentType::Type" }
        Property { name: "handler"; type: "ContentHandler::Handler" }
        Property { name: "peers"; type: "ContentPeer"; isList: true; isReadonly: true }
        Signal { name: "findPeersCompleted" }
        Method { name: "findPeers" }
    }
    Component {
        name: "ContentScope"
        prototype: "QObject"
        exports: [
            "Ubuntu.Content/ContentScope 0.1",
            "Ubuntu.Content/ContentScope 1.0",
            "Ubuntu.Content/ContentScope 1.1",
            "Ubuntu.Content/ContentScope 1.3"
        ]
        exportMetaObjectRevisions: [0, 0, 0, 0]
        Enum {
            name: "Scope"
            values: {
                "System": 0,
                "User": 1,
                "App": 2
            }
        }
    }
    Component {
        name: "ContentStore"
        prototype: "QObject"
        exports: [
            "Ubuntu.Content/ContentStore 0.1",
            "Ubuntu.Content/ContentStore 1.0",
            "Ubuntu.Content/ContentStore 1.1",
            "Ubuntu.Content/ContentStore 1.3"
        ]
        exportMetaObjectRevisions: [0, 0, 0, 0]
        Property { name: "uri"; type: "string"; isReadonly: true }
        Property { name: "scope"; type: "ContentScope::Scope" }
    }
    Component {
        name: "ContentTransfer"
        prototype: "QObject"
        exports: [
            "Ubuntu.Content/ContentTransfer 0.1",
            "Ubuntu.Content/ContentTransfer 1.0",
            "Ubuntu.Content/ContentTransfer 1.1",
            "Ubuntu.Content/ContentTransfer 1.3"
        ]
        isCreatable: false
        exportMetaObjectRevisions: [0, 0, 0, 0]
        Enum {
            name: "State"
            values: {
                "Created": 0,
                "Initiated": 1,
                "InProgress": 2,
                "Charged": 3,
                "Collected": 4,
                "Aborted": 5,
                "Finalized": 6,
                "Downloading": 7,
                "Downloaded": 8
            }
        }
        Enum {
            name: "Direction"
            values: {
                "Import": 0,
                "Export": 1,
                "Share": 2
            }
        }
        Enum {
            name: "SelectionType"
            values: {
                "Single": 0,
                "Multiple": 1
            }
        }
        Property { name: "state"; type: "State" }
        Property { name: "direction"; type: "Direction"; isReadonly: true }
        Property { name: "selectionType"; type: "SelectionType" }
        Property { name: "store"; type: "string"; isReadonly: true }
        Property { name: "items"; type: "ContentItem"; isList: true; isReadonly: true }
        Property { name: "downloadId"; type: "string" }
        Property { name: "contentType"; type: "ContentType::Type"; isReadonly: true }
        Property { name: "source"; type: "string"; isReadonly: true }
        Property { name: "destination"; type: "string"; isReadonly: true }
        Method { name: "start"; type: "bool" }
        Method { name: "finalize"; type: "bool" }
        Method {
            name: "setStore"
            Parameter { name: "contentStore"; type: "ContentStore"; isPointer: true }
        }
    }
    Component {
        name: "ContentType"
        prototype: "QObject"
        exports: [
            "Ubuntu.Content/ContentType 0.1",
            "Ubuntu.Content/ContentType 1.0",
            "Ubuntu.Content/ContentType 1.1",
            "Ubuntu.Content/ContentType 1.3"
        ]
        isCreatable: false
        exportMetaObjectRevisions: [0, 0, 0, 0]
        Enum {
            name: "Type"
            values: {
                "Undefined": -2,
                "All": -1,
                "Unknown": 0,
                "Documents": 1,
                "Pictures": 2,
                "Music": 3,
                "Contacts": 4,
                "Videos": 5,
                "Links": 6,
                "EBooks": 7,
                "Text": 8,
                "Events": 9
            }
        }
    }
    Component {
        prototype: "QObject"
        name: "UbuntuColors 1.3"
        exports: ["UbuntuColors 1.3"]
        exportMetaObjectRevisions: [3]
        isComposite: true
        isCreatable: false
        isSingleton: true
        Property { name: "lightAubergine"; type: "QColor"; isReadonly: true }
        Property { name: "midAubergine"; type: "QColor"; isReadonly: true }
        Property { name: "darkAubergine"; type: "QColor"; isReadonly: true }
        Property { name: "warmGrey"; type: "QColor"; isReadonly: true }
        Property { name: "coolGrey"; type: "QColor"; isReadonly: true }
        Property { name: "orangeGradient"; type: "QQuickGradient"; isPointer: true }
        Property { name: "greyGradient"; type: "QQuickGradient"; isPointer: true }
        Property { name: "orange"; type: "QColor"; isReadonly: true }
        Property { name: "lightGrey"; type: "QColor"; isReadonly: true }
        Property { name: "silk"; type: "QColor"; isReadonly: true }
        Property { name: "darkGrey"; type: "QColor"; isReadonly: true }
        Property { name: "slate"; type: "QColor"; isReadonly: true }
        Property { name: "red"; type: "QColor"; isReadonly: true }
        Property { name: "green"; type: "QColor"; isReadonly: true }
        Property { name: "blue"; type: "QColor"; isReadonly: true }
        Property { name: "purple"; type: "QColor"; isReadonly: true }
        Property { name: "porcelain"; type: "QColor"; isReadonly: true }
        Property { name: "ash"; type: "QColor"; isReadonly: true }
        Property { name: "graphite"; type: "QColor"; isReadonly: true }
        Property { name: "inkstone"; type: "QColor"; isReadonly: true }
        Property { name: "jet"; type: "QColor"; isReadonly: true }
    }
}
