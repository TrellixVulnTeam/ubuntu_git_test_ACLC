import QtQuick.tooling 1.2

// This file describes the plugin-supplied types contained in the library.
// It is used for QML tooling purposes only.
//
// This file was auto-generated by:
// 'qmlplugindump -notrelocatable Biometryd 0.0 ../'

Module {
    dependencies: ["QtQuick 2.0"]
    Component {
        name: "biometry::qml::Clearance"
        prototype: "biometry::qml::Operation"
        exports: ["Biometryd/Clearance 0.0"]
        isCreatable: false
        exportMetaObjectRevisions: [0]
    }
    Component {
        name: "biometry::qml::Device"
        prototype: "QObject"
        exports: ["Biometryd/Device 0.0"]
        isCreatable: false
        exportMetaObjectRevisions: [0]
        Property {
            name: "templateStore"
            type: "biometry::qml::TemplateStore"
            isReadonly: true
            isPointer: true
        }
        Property {
            name: "identifier"
            type: "biometry::qml::Identifier"
            isReadonly: true
            isPointer: true
        }
    }
    Component {
        name: "biometry::qml::Enrollment"
        prototype: "biometry::qml::Operation"
        exports: ["Biometryd/Enrollment 0.0"]
        isCreatable: false
        exportMetaObjectRevisions: [0]
    }
    Component {
        name: "biometry::qml::FingerprintReader"
        prototype: "QObject"
        exports: ["Biometryd/FingerprintReader 0.0"]
        isCreatable: false
        isSingleton: true
        exportMetaObjectRevisions: [0]
        Enum {
            name: "Direction"
            values: {
                "NotAvailable": 0,
                "SouthWest": 1,
                "South": 2,
                "SouthEast": 3,
                "NorthWest": 4,
                "North": 5,
                "NorthEast": 6,
                "East": 7,
                "West": 8
            }
        }
        Property { name: "isFingerPresent"; type: "string"; isReadonly: true }
        Property { name: "hasMainClusterIdentified"; type: "string"; isReadonly: true }
        Property { name: "suggestedNextDirection"; type: "string"; isReadonly: true }
        Property { name: "masks"; type: "string"; isReadonly: true }
        Method { name: "isFingerPresent"; type: "string" }
        Method { name: "hasMainClusterIdentified"; type: "string" }
        Method { name: "suggestedNextDirection"; type: "string" }
        Method { name: "estimatedFingerSize"; type: "string" }
        Method { name: "masks"; type: "string" }
    }
    Component {
        name: "biometry::qml::Identification"
        prototype: "biometry::qml::Operation"
        exports: ["Biometryd/Identification 0.0"]
        isCreatable: false
        exportMetaObjectRevisions: [0]
    }
    Component {
        name: "biometry::qml::Identifier"
        prototype: "QObject"
        exports: ["Biometryd/Identifier 0.0"]
        isCreatable: false
        exportMetaObjectRevisions: [0]
        Method { name: "identifyUser"; type: "biometry::qml::Identification*" }
    }
    Component {
        name: "biometry::qml::List"
        prototype: "biometry::qml::Operation"
        exports: ["Biometryd/List 0.0"]
        isCreatable: false
        exportMetaObjectRevisions: [0]
    }
    Component {
        name: "biometry::qml::Observer"
        prototype: "QObject"
        exports: ["Biometryd/Observer 0.0"]
        exportMetaObjectRevisions: [0]
        Signal { name: "started" }
        Signal {
            name: "progressed"
            Parameter { name: "percent"; type: "double" }
            Parameter { name: "details"; type: "QVariantMap" }
        }
        Signal {
            name: "canceled"
            Parameter { name: "reason"; type: "string" }
        }
        Signal {
            name: "failed"
            Parameter { name: "reason"; type: "string" }
        }
        Signal {
            name: "succeeded"
            Parameter { name: "result"; type: "QVariant" }
        }
    }
    Component {
        name: "biometry::qml::Operation"
        prototype: "QObject"
        exports: ["Biometryd/Operation 0.0"]
        isCreatable: false
        exportMetaObjectRevisions: [0]
        Method {
            name: "start"
            type: "bool"
            Parameter { name: "observer"; type: "Observer"; isPointer: true }
        }
        Method { name: "cancel"; type: "bool" }
    }
    Component {
        name: "biometry::qml::Removal"
        prototype: "biometry::qml::Operation"
        exports: ["Biometryd/Removal 0.0"]
        isCreatable: false
        exportMetaObjectRevisions: [0]
    }
    Component {
        name: "biometry::qml::Service"
        prototype: "QObject"
        exports: ["Biometryd/Biometryd 0.0"]
        isCreatable: false
        isSingleton: true
        exportMetaObjectRevisions: [0]
        Property { name: "available"; type: "bool"; isReadonly: true }
        Property {
            name: "defaultDevice"
            type: "biometry::qml::Device"
            isReadonly: true
            isPointer: true
        }
        Signal {
            name: "availableChanged"
            Parameter { type: "bool" }
        }
        Method { name: "defaultDevice"; type: "biometry::qml::Device*" }
        Method { name: "isAvailable"; type: "bool" }
        Method {
            name: "setAvailable"
            Parameter { name: "available"; type: "bool" }
        }
    }
    Component {
        name: "biometry::qml::SizeQuery"
        prototype: "biometry::qml::Operation"
        exports: ["Biometryd/SizeQuery 0.0"]
        isCreatable: false
        exportMetaObjectRevisions: [0]
    }
    Component {
        name: "biometry::qml::TemplateStore"
        prototype: "QObject"
        exports: ["Biometryd/TemplateStore 0.0"]
        isCreatable: false
        exportMetaObjectRevisions: [0]
        Method {
            name: "size"
            type: "biometry::qml::SizeQuery*"
            Parameter { name: "user"; type: "biometry::qml::User"; isPointer: true }
        }
        Method {
            name: "list"
            type: "biometry::qml::List*"
            Parameter { name: "user"; type: "biometry::qml::User"; isPointer: true }
        }
        Method {
            name: "enroll"
            type: "biometry::qml::Enrollment*"
            Parameter { name: "user"; type: "biometry::qml::User"; isPointer: true }
        }
        Method {
            name: "remove"
            type: "biometry::qml::Removal*"
            Parameter { name: "user"; type: "biometry::qml::User"; isPointer: true }
            Parameter { name: "id"; type: "qulonglong" }
        }
        Method {
            name: "clear"
            type: "biometry::qml::Clearance*"
            Parameter { name: "user"; type: "biometry::qml::User"; isPointer: true }
        }
    }
    Component {
        name: "biometry::qml::User"
        prototype: "QObject"
        exports: ["Biometryd/User 0.0"]
        exportMetaObjectRevisions: [0]
        Property { name: "uid"; type: "uint" }
        Signal {
            name: "uidChanged"
            Parameter { name: "id"; type: "uint" }
        }
        Method { name: "uid"; type: "uint" }
        Method {
            name: "setUid"
            Parameter { name: "id"; type: "uint" }
        }
    }
}
